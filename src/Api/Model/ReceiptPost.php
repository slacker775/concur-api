<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Concur\Api\Model;

class ReceiptPost
{
    /**
     * The net amount of the transaction. A positive number means a payment is due. A negative number means a refund is due. Zero means no payment or refund is due. Range: -922,337,203,685,477 to 922,337,203,685,477.
     *
     * @var float
     */
    protected $amount;
    /**
     * The <a target="_blank" href="http://en.wikipedia.org/wiki/ISO_4217">3-letter ISO 4217 currency code</a> for the currency paid to the provider.
     *
     * @var string
     */
    protected $currencyCode;
    /**
     * @var ReceiptCustomField
     */
    protected $customFields;
    /**
     * The code for the form of payment. Possible values: CASH (Cash), CCARD (Credit Card), CPAID (Company Paid).
     *
     * @var string
     */
    protected $formofPaymentCode;
    /**
     * @var GeneralDetail
     */
    protected $generalDetail;
    /**
     * @var HotelDetail
     */
    protected $hotelDetail;
    /**
     * The binary receipt image in Base64 encoding. This API supports PNG, JPEG, JPG, and PDF file formats.
     *
     * @var string
     */
    protected $imageBase64;
    /**
     * @var MatchingFact
     */
    protected $matchingFact;
    /**
     * @var Merchant
     */
    protected $merchant;
    /**
     * @var PaymentCard
     */
    protected $paymentCard;
    /**
     * @var RideDetail
     */
    protected $rideDetail;
    /**
     * The date and time when the transaction happened. Format: YYYY-MM-DDThh:mm.
     *
     * @var \DateTime
     */
    protected $transactionDateTime;
    /**
     * The type of receipt. Possible values: General, Ride, Hotel.
     *
     * @var string
     */
    protected $type;

    /**
     * The net amount of the transaction. A positive number means a payment is due. A negative number means a refund is due. Zero means no payment or refund is due. Range: -922,337,203,685,477 to 922,337,203,685,477.
     */
    public function getAmount(): float
    {
        return $this->amount;
    }

    /**
     * The net amount of the transaction. A positive number means a payment is due. A negative number means a refund is due. Zero means no payment or refund is due. Range: -922,337,203,685,477 to 922,337,203,685,477.
     */
    public function setAmount(float $amount): self
    {
        $this->amount = $amount;

        return $this;
    }

    /**
     * The <a target="_blank" href="http://en.wikipedia.org/wiki/ISO_4217">3-letter ISO 4217 currency code</a> for the currency paid to the provider.
     */
    public function getCurrencyCode(): string
    {
        return $this->currencyCode;
    }

    /**
     * The <a target="_blank" href="http://en.wikipedia.org/wiki/ISO_4217">3-letter ISO 4217 currency code</a> for the currency paid to the provider.
     */
    public function setCurrencyCode(string $currencyCode): self
    {
        $this->currencyCode = $currencyCode;

        return $this;
    }

    public function getCustomFields(): ReceiptCustomField
    {
        return $this->customFields;
    }

    public function setCustomFields(ReceiptCustomField $customFields): self
    {
        $this->customFields = $customFields;

        return $this;
    }

    /**
     * The code for the form of payment. Possible values: CASH (Cash), CCARD (Credit Card), CPAID (Company Paid).
     */
    public function getFormofPaymentCode(): string
    {
        return $this->formofPaymentCode;
    }

    /**
     * The code for the form of payment. Possible values: CASH (Cash), CCARD (Credit Card), CPAID (Company Paid).
     */
    public function setFormofPaymentCode(string $formofPaymentCode): self
    {
        $this->formofPaymentCode = $formofPaymentCode;

        return $this;
    }

    public function getGeneralDetail(): GeneralDetail
    {
        return $this->generalDetail;
    }

    public function setGeneralDetail(GeneralDetail $generalDetail): self
    {
        $this->generalDetail = $generalDetail;

        return $this;
    }

    public function getHotelDetail(): HotelDetail
    {
        return $this->hotelDetail;
    }

    public function setHotelDetail(HotelDetail $hotelDetail): self
    {
        $this->hotelDetail = $hotelDetail;

        return $this;
    }

    /**
     * The binary receipt image in Base64 encoding. This API supports PNG, JPEG, JPG, and PDF file formats.
     */
    public function getImageBase64(): string
    {
        return $this->imageBase64;
    }

    /**
     * The binary receipt image in Base64 encoding. This API supports PNG, JPEG, JPG, and PDF file formats.
     */
    public function setImageBase64(string $imageBase64): self
    {
        $this->imageBase64 = $imageBase64;

        return $this;
    }

    public function getMatchingFact(): MatchingFact
    {
        return $this->matchingFact;
    }

    public function setMatchingFact(MatchingFact $matchingFact): self
    {
        $this->matchingFact = $matchingFact;

        return $this;
    }

    public function getMerchant(): Merchant
    {
        return $this->merchant;
    }

    public function setMerchant(Merchant $merchant): self
    {
        $this->merchant = $merchant;

        return $this;
    }

    public function getPaymentCard(): PaymentCard
    {
        return $this->paymentCard;
    }

    public function setPaymentCard(PaymentCard $paymentCard): self
    {
        $this->paymentCard = $paymentCard;

        return $this;
    }

    public function getRideDetail(): RideDetail
    {
        return $this->rideDetail;
    }

    public function setRideDetail(RideDetail $rideDetail): self
    {
        $this->rideDetail = $rideDetail;

        return $this;
    }

    /**
     * The date and time when the transaction happened. Format: YYYY-MM-DDThh:mm.
     */
    public function getTransactionDateTime(): \DateTime
    {
        return $this->transactionDateTime;
    }

    /**
     * The date and time when the transaction happened. Format: YYYY-MM-DDThh:mm.
     */
    public function setTransactionDateTime(\DateTime $transactionDateTime): self
    {
        $this->transactionDateTime = $transactionDateTime;

        return $this;
    }

    /**
     * The type of receipt. Possible values: General, Ride, Hotel.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * The type of receipt. Possible values: General, Ride, Hotel.
     */
    public function setType(string $type): self
    {
        $this->type = $type;

        return $this;
    }
}
