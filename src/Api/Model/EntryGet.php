<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Concur\Api\Model;

class EntryGet
{
    /**
     * The type of allocations for the expense. Supported values: P - partial allocation, F - full allocation, N - no allocation.
     *
     * @var string
     */
    protected $allocationType;
    /**
     * The approved amount of the expense entry, in the report currency.
     *
     * @var float
     */
    protected $approvedAmount;
    /**
     * The unique identifier for a company card transaction that is associated with this expense. This element is null when there is no company card transaction associated with this expense.
     *
     * @var string|null
     */
    protected $companyCardTransactionID;
    /**
     * @var mixed
     */
    protected $custom1;
    /**
     * @var mixed
     */
    protected $custom10;
    /**
     * @var mixed
     */
    protected $custom11;
    /**
     * @var mixed
     */
    protected $custom12;
    /**
     * @var mixed
     */
    protected $custom13;
    /**
     * @var mixed
     */
    protected $custom14;
    /**
     * @var mixed
     */
    protected $custom15;
    /**
     * @var mixed
     */
    protected $custom16;
    /**
     * @var mixed
     */
    protected $custom17;
    /**
     * @var mixed
     */
    protected $custom18;
    /**
     * @var mixed
     */
    protected $custom19;
    /**
     * @var mixed
     */
    protected $custom2;
    /**
     * @var mixed
     */
    protected $custom20;
    /**
     * @var mixed
     */
    protected $custom21;
    /**
     * @var mixed
     */
    protected $custom22;
    /**
     * @var mixed
     */
    protected $custom23;
    /**
     * @var mixed
     */
    protected $custom24;
    /**
     * @var mixed
     */
    protected $custom25;
    /**
     * @var mixed
     */
    protected $custom26;
    /**
     * @var mixed
     */
    protected $custom27;
    /**
     * @var mixed
     */
    protected $custom28;
    /**
     * @var mixed
     */
    protected $custom29;
    /**
     * @var mixed
     */
    protected $custom3;
    /**
     * @var mixed
     */
    protected $custom30;
    /**
     * @var mixed
     */
    protected $custom31;
    /**
     * @var mixed
     */
    protected $custom32;
    /**
     * @var mixed
     */
    protected $custom33;
    /**
     * @var mixed
     */
    protected $custom34;
    /**
     * @var mixed
     */
    protected $custom35;
    /**
     * @var mixed
     */
    protected $custom36;
    /**
     * @var mixed
     */
    protected $custom37;
    /**
     * @var mixed
     */
    protected $custom38;
    /**
     * @var mixed
     */
    protected $custom39;
    /**
     * @var mixed
     */
    protected $custom4;
    /**
     * @var mixed
     */
    protected $custom40;
    /**
     * @var mixed
     */
    protected $custom5;
    /**
     * @var mixed
     */
    protected $custom6;
    /**
     * @var mixed
     */
    protected $custom7;
    /**
     * @var mixed
     */
    protected $custom8;
    /**
     * @var mixed
     */
    protected $custom9;
    /**
     * The description of the expense. Maximum length: 64 characters.
     *
     * @var string
     */
    protected $description;
    /**
     * The unique identifier for an eReceipt that is associated with this expense. This element is null when there is no eReceipt associated with this expense.
     *
     * @var string|null
     */
    protected $electronicReceiptID;
    /**
     * The unique identifier of an employee bank account that is associated with this expense. Typically, this element is used when Expense Pay reimburses the employee for this expense.
     *
     * @var string|null
     */
    protected $employeeBankAccountID;
    /**
     * The currency conversion rate that converts the transaction amount that is in the transaction currency into the posted amount that is in the report currency. This element is typically not provided. If this element is empty for transactions in a currency different than the user's reimbursement currency, Expense will use the company's configured exchange rates to determine the posted amount for the transaction. If the system is not able to determine the exchange rate, a value of 1.0 will be used.
     *
     * @var float
     */
    protected $exchangeRate;
    /**
     * The code for the expense type.
     *
     * @var string
     */
    protected $expenseTypeCode;
    /**
     * The name of the expense type, localized to the user's language.
     *
     * @var string
     */
    protected $expenseTypeName;
    /**
     * The ID of the form used by this expense entry.
     *
     * @var string
     */
    protected $formID;
    /**
     * Whether the entry has a cash advance applied to it. Format: true or false.
     *
     * @var bool
     */
    protected $hasAppliedCashAdvance;
    /**
     * Indicates whether the expense has attendees. Format: true or false.
     *
     * @var bool
     */
    protected $hasAttendees;
    /**
     * Whether the expense has comments. Format: true or false.
     *
     * @var bool
     */
    protected $hasComments;
    /**
     * Whether the expense has exceptions. Format: true or false.
     *
     * @var bool
     */
    protected $hasExceptions;
    /**
     * Indicates whether there is an entry image attached to the entry. Format: true or false.
     *
     * @var bool
     */
    protected $hasImage;
    /**
     * Indicates whether the expense has itemizations. Use the Format: true or false.
     *
     * @var bool
     */
    protected $hasItemizations;
    /**
     * Indicates whether the entry has VAT data. Format: true or false.
     *
     * @var bool
     */
    protected $hasVAT;
    /**
     * The unique identifier of the resource.
     *
     * @var string
     */
    protected $iD;
    /**
     * Indicates whether the expense is billable. Format: true or false.
     *
     * @var bool
     */
    protected $isBillable;
    /**
     * Indicates whether an entry image is required for the entry. Format: true or false.
     *
     * @var bool
     */
    protected $isImageRequired;
    /**
     * Whether the entry is paid using the Expense Pay service. This element has a value if the report has reached the Processing Payment workflow step, because this is when Concur Expense determines whether it will be paid by Expense Pay. Format: true or false.
     *
     * @var bool
     */
    protected $isPaidByExpensePay;
    /**
     * Indicates whether the expense is personal (that is, non-reimbursable). Format: true or false.
     *
     * @var bool
     */
    protected $isPersonal;
    /**
     * Indicates whether the expense entry was imported from a personal card feed. Format: true or false.
     *
     * @var bool
     */
    protected $isPersonalCardCharge;
    /**
     * @var mixed
     */
    protected $journey;
    /**
     * The UTC date when the entry was last modified.
     *
     * @var mixed
     */
    protected $lastModified;
    /**
     * The 2-letter ISO 3166-1 country code where the expense was incurred.
     *
     * @var string|null
     */
    protected $locationCountry;
    /**
     * The unique identifier for the location where the expense was incurred.
     *
     * @var string|null
     */
    protected $locationID;
    /**
     * The location where the expense was incurred, usually the city name.
     *
     * @var string|null
     */
    protected $locationName;
    /**
     * The ISO 3166-2:2007 country subdivision state, province, or other country subdivision where the expense was incurred.
     *
     * @var string|null
     */
    protected $locationSubdivision;
    /**
     * @var mixed
     */
    protected $orgUnit1;
    /**
     * @var mixed
     */
    protected $orgUnit2;
    /**
     * @var mixed
     */
    protected $orgUnit3;
    /**
     * @var mixed
     */
    protected $orgUnit4;
    /**
     * @var mixed
     */
    protected $orgUnit5;
    /**
     * @var mixed
     */
    protected $orgUnit6;
    /**
     * The ID of the payment type for the entry. For mileage expenses, use the Cash payment type. For expense types with an expense code that uses a transaction amount instead of a distance, this element is required. This element should not be used for expense types with an expense code for Company Car or Personal Car, because these two expense codes always use the Cash payment type.
     *
     * @var string
     */
    protected $paymentTypeID;
    /**
     * The name of the payment type, localized to the user's language.
     *
     * @var string
     */
    protected $paymentTypeName;
    /**
     * The amount of the expense entry, in the report currency.
     *
     * @var float
     */
    protected $postedAmount;
    /**
     * Indicates whether this entry has been reviewed by a processor. Format: true or false.
     *
     * @var bool
     */
    protected $receiptReceived;
    /**
     * The report ID of the report where the entry will be added.
     *
     * @var string
     */
    protected $reportID;
    /**
     * The login ID of the report owner.
     *
     * @var string
     */
    protected $reportOwnerID;
    /**
     * The ID of the spending category that is specified for this expense entry.
     *
     * @var string
     */
    protected $spendCategoryCode;
    /**
     * The name of the spending category that is specified for this expense entry, localized to the user's language.
     *
     * @var string
     */
    protected $spendCategoryName;
    /**
     * The receipt type for this entry. Supported values: T - tax receipt, R - regular receipt, N - no receipt.
     *
     * @var string
     */
    protected $taxReceiptType;
    /**
     * The amount of the expense entry, in the transaction currency paid to the vendor. For expense types with an expense code that uses a transaction amount instead of a distance, this element is required. This element should not be used for expense types with an expense code for Company Car or Personal Car, because these two expense codes use a distance instead of a transaction amount.
     *
     * @var float
     */
    protected $transactionAmount;
    /**
     * The 3-letter ISO 4217 currency code for the expense entry transaction amount. This is the currency in which the vendor was paid. For expense types with an expense code that uses a transaction amount instead of a distance, this element is required. This element should not be used for expense types with an expense code for Company Car or Personal Car, because for these two expense codes the currency is always the Report Currency.
     *
     * @var string
     */
    protected $transactionCurrencyCode;
    /**
     * The date when the good or service associated with this expense entry was provided. Format: YYYY-MM-DD.
     *
     * @var mixed
     */
    protected $transactionDate;
    /**
     * The unique identifier of a trip in the Itinerary Service that includes a travel booking associated with this expense. This element is null when there is no trip associated with the expense.
     *
     * @var string|null
     */
    protected $tripID;
    /**
     * The URI to the resource.
     *
     * @var string
     */
    protected $uRI;
    /**
     * The name of the vendor for the expense entry. Maximum length: 64 characters.
     *
     * @var string|null
     */
    protected $vendorDescription;
    /**
     * The unique identifier for a vendor list item.
     *
     * @var string|null
     */
    protected $vendorListItemID;
    /**
     * The name of an item from a vendor list.
     *
     * @var string|null
     */
    protected $vendorListItemName;

    /**
     * The type of allocations for the expense. Supported values: P - partial allocation, F - full allocation, N - no allocation.
     */
    public function getAllocationType(): string
    {
        return $this->allocationType;
    }

    /**
     * The type of allocations for the expense. Supported values: P - partial allocation, F - full allocation, N - no allocation.
     */
    public function setAllocationType(string $allocationType): self
    {
        $this->allocationType = $allocationType;

        return $this;
    }

    /**
     * The approved amount of the expense entry, in the report currency.
     */
    public function getApprovedAmount(): float
    {
        return $this->approvedAmount;
    }

    /**
     * The approved amount of the expense entry, in the report currency.
     */
    public function setApprovedAmount(float $approvedAmount): self
    {
        $this->approvedAmount = $approvedAmount;

        return $this;
    }

    /**
     * The unique identifier for a company card transaction that is associated with this expense. This element is null when there is no company card transaction associated with this expense.
     */
    public function getCompanyCardTransactionID(): ?string
    {
        return $this->companyCardTransactionID;
    }

    /**
     * The unique identifier for a company card transaction that is associated with this expense. This element is null when there is no company card transaction associated with this expense.
     */
    public function setCompanyCardTransactionID(?string $companyCardTransactionID): self
    {
        $this->companyCardTransactionID = $companyCardTransactionID;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom1()
    {
        return $this->custom1;
    }

    /**
     * @param mixed $custom1
     */
    public function setCustom1($custom1): self
    {
        $this->custom1 = $custom1;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom10()
    {
        return $this->custom10;
    }

    /**
     * @param mixed $custom10
     */
    public function setCustom10($custom10): self
    {
        $this->custom10 = $custom10;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom11()
    {
        return $this->custom11;
    }

    /**
     * @param mixed $custom11
     */
    public function setCustom11($custom11): self
    {
        $this->custom11 = $custom11;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom12()
    {
        return $this->custom12;
    }

    /**
     * @param mixed $custom12
     */
    public function setCustom12($custom12): self
    {
        $this->custom12 = $custom12;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom13()
    {
        return $this->custom13;
    }

    /**
     * @param mixed $custom13
     */
    public function setCustom13($custom13): self
    {
        $this->custom13 = $custom13;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom14()
    {
        return $this->custom14;
    }

    /**
     * @param mixed $custom14
     */
    public function setCustom14($custom14): self
    {
        $this->custom14 = $custom14;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom15()
    {
        return $this->custom15;
    }

    /**
     * @param mixed $custom15
     */
    public function setCustom15($custom15): self
    {
        $this->custom15 = $custom15;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom16()
    {
        return $this->custom16;
    }

    /**
     * @param mixed $custom16
     */
    public function setCustom16($custom16): self
    {
        $this->custom16 = $custom16;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom17()
    {
        return $this->custom17;
    }

    /**
     * @param mixed $custom17
     */
    public function setCustom17($custom17): self
    {
        $this->custom17 = $custom17;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom18()
    {
        return $this->custom18;
    }

    /**
     * @param mixed $custom18
     */
    public function setCustom18($custom18): self
    {
        $this->custom18 = $custom18;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom19()
    {
        return $this->custom19;
    }

    /**
     * @param mixed $custom19
     */
    public function setCustom19($custom19): self
    {
        $this->custom19 = $custom19;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom2()
    {
        return $this->custom2;
    }

    /**
     * @param mixed $custom2
     */
    public function setCustom2($custom2): self
    {
        $this->custom2 = $custom2;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom20()
    {
        return $this->custom20;
    }

    /**
     * @param mixed $custom20
     */
    public function setCustom20($custom20): self
    {
        $this->custom20 = $custom20;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom21()
    {
        return $this->custom21;
    }

    /**
     * @param mixed $custom21
     */
    public function setCustom21($custom21): self
    {
        $this->custom21 = $custom21;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom22()
    {
        return $this->custom22;
    }

    /**
     * @param mixed $custom22
     */
    public function setCustom22($custom22): self
    {
        $this->custom22 = $custom22;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom23()
    {
        return $this->custom23;
    }

    /**
     * @param mixed $custom23
     */
    public function setCustom23($custom23): self
    {
        $this->custom23 = $custom23;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom24()
    {
        return $this->custom24;
    }

    /**
     * @param mixed $custom24
     */
    public function setCustom24($custom24): self
    {
        $this->custom24 = $custom24;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom25()
    {
        return $this->custom25;
    }

    /**
     * @param mixed $custom25
     */
    public function setCustom25($custom25): self
    {
        $this->custom25 = $custom25;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom26()
    {
        return $this->custom26;
    }

    /**
     * @param mixed $custom26
     */
    public function setCustom26($custom26): self
    {
        $this->custom26 = $custom26;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom27()
    {
        return $this->custom27;
    }

    /**
     * @param mixed $custom27
     */
    public function setCustom27($custom27): self
    {
        $this->custom27 = $custom27;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom28()
    {
        return $this->custom28;
    }

    /**
     * @param mixed $custom28
     */
    public function setCustom28($custom28): self
    {
        $this->custom28 = $custom28;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom29()
    {
        return $this->custom29;
    }

    /**
     * @param mixed $custom29
     */
    public function setCustom29($custom29): self
    {
        $this->custom29 = $custom29;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom3()
    {
        return $this->custom3;
    }

    /**
     * @param mixed $custom3
     */
    public function setCustom3($custom3): self
    {
        $this->custom3 = $custom3;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom30()
    {
        return $this->custom30;
    }

    /**
     * @param mixed $custom30
     */
    public function setCustom30($custom30): self
    {
        $this->custom30 = $custom30;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom31()
    {
        return $this->custom31;
    }

    /**
     * @param mixed $custom31
     */
    public function setCustom31($custom31): self
    {
        $this->custom31 = $custom31;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom32()
    {
        return $this->custom32;
    }

    /**
     * @param mixed $custom32
     */
    public function setCustom32($custom32): self
    {
        $this->custom32 = $custom32;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom33()
    {
        return $this->custom33;
    }

    /**
     * @param mixed $custom33
     */
    public function setCustom33($custom33): self
    {
        $this->custom33 = $custom33;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom34()
    {
        return $this->custom34;
    }

    /**
     * @param mixed $custom34
     */
    public function setCustom34($custom34): self
    {
        $this->custom34 = $custom34;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom35()
    {
        return $this->custom35;
    }

    /**
     * @param mixed $custom35
     */
    public function setCustom35($custom35): self
    {
        $this->custom35 = $custom35;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom36()
    {
        return $this->custom36;
    }

    /**
     * @param mixed $custom36
     */
    public function setCustom36($custom36): self
    {
        $this->custom36 = $custom36;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom37()
    {
        return $this->custom37;
    }

    /**
     * @param mixed $custom37
     */
    public function setCustom37($custom37): self
    {
        $this->custom37 = $custom37;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom38()
    {
        return $this->custom38;
    }

    /**
     * @param mixed $custom38
     */
    public function setCustom38($custom38): self
    {
        $this->custom38 = $custom38;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom39()
    {
        return $this->custom39;
    }

    /**
     * @param mixed $custom39
     */
    public function setCustom39($custom39): self
    {
        $this->custom39 = $custom39;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom4()
    {
        return $this->custom4;
    }

    /**
     * @param mixed $custom4
     */
    public function setCustom4($custom4): self
    {
        $this->custom4 = $custom4;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom40()
    {
        return $this->custom40;
    }

    /**
     * @param mixed $custom40
     */
    public function setCustom40($custom40): self
    {
        $this->custom40 = $custom40;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom5()
    {
        return $this->custom5;
    }

    /**
     * @param mixed $custom5
     */
    public function setCustom5($custom5): self
    {
        $this->custom5 = $custom5;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom6()
    {
        return $this->custom6;
    }

    /**
     * @param mixed $custom6
     */
    public function setCustom6($custom6): self
    {
        $this->custom6 = $custom6;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom7()
    {
        return $this->custom7;
    }

    /**
     * @param mixed $custom7
     */
    public function setCustom7($custom7): self
    {
        $this->custom7 = $custom7;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom8()
    {
        return $this->custom8;
    }

    /**
     * @param mixed $custom8
     */
    public function setCustom8($custom8): self
    {
        $this->custom8 = $custom8;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCustom9()
    {
        return $this->custom9;
    }

    /**
     * @param mixed $custom9
     */
    public function setCustom9($custom9): self
    {
        $this->custom9 = $custom9;

        return $this;
    }

    /**
     * The description of the expense. Maximum length: 64 characters.
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * The description of the expense. Maximum length: 64 characters.
     */
    public function setDescription(string $description): self
    {
        $this->description = $description;

        return $this;
    }

    /**
     * The unique identifier for an eReceipt that is associated with this expense. This element is null when there is no eReceipt associated with this expense.
     */
    public function getElectronicReceiptID(): ?string
    {
        return $this->electronicReceiptID;
    }

    /**
     * The unique identifier for an eReceipt that is associated with this expense. This element is null when there is no eReceipt associated with this expense.
     */
    public function setElectronicReceiptID(?string $electronicReceiptID): self
    {
        $this->electronicReceiptID = $electronicReceiptID;

        return $this;
    }

    /**
     * The unique identifier of an employee bank account that is associated with this expense. Typically, this element is used when Expense Pay reimburses the employee for this expense.
     */
    public function getEmployeeBankAccountID(): ?string
    {
        return $this->employeeBankAccountID;
    }

    /**
     * The unique identifier of an employee bank account that is associated with this expense. Typically, this element is used when Expense Pay reimburses the employee for this expense.
     */
    public function setEmployeeBankAccountID(?string $employeeBankAccountID): self
    {
        $this->employeeBankAccountID = $employeeBankAccountID;

        return $this;
    }

    /**
     * The currency conversion rate that converts the transaction amount that is in the transaction currency into the posted amount that is in the report currency. This element is typically not provided. If this element is empty for transactions in a currency different than the user's reimbursement currency, Expense will use the company's configured exchange rates to determine the posted amount for the transaction. If the system is not able to determine the exchange rate, a value of 1.0 will be used.
     */
    public function getExchangeRate(): float
    {
        return $this->exchangeRate;
    }

    /**
     * The currency conversion rate that converts the transaction amount that is in the transaction currency into the posted amount that is in the report currency. This element is typically not provided. If this element is empty for transactions in a currency different than the user's reimbursement currency, Expense will use the company's configured exchange rates to determine the posted amount for the transaction. If the system is not able to determine the exchange rate, a value of 1.0 will be used.
     */
    public function setExchangeRate(float $exchangeRate): self
    {
        $this->exchangeRate = $exchangeRate;

        return $this;
    }

    /**
     * The code for the expense type.
     */
    public function getExpenseTypeCode(): string
    {
        return $this->expenseTypeCode;
    }

    /**
     * The code for the expense type.
     */
    public function setExpenseTypeCode(string $expenseTypeCode): self
    {
        $this->expenseTypeCode = $expenseTypeCode;

        return $this;
    }

    /**
     * The name of the expense type, localized to the user's language.
     */
    public function getExpenseTypeName(): string
    {
        return $this->expenseTypeName;
    }

    /**
     * The name of the expense type, localized to the user's language.
     */
    public function setExpenseTypeName(string $expenseTypeName): self
    {
        $this->expenseTypeName = $expenseTypeName;

        return $this;
    }

    /**
     * The ID of the form used by this expense entry.
     */
    public function getFormID(): string
    {
        return $this->formID;
    }

    /**
     * The ID of the form used by this expense entry.
     */
    public function setFormID(string $formID): self
    {
        $this->formID = $formID;

        return $this;
    }

    /**
     * Whether the entry has a cash advance applied to it. Format: true or false.
     */
    public function getHasAppliedCashAdvance(): bool
    {
        return $this->hasAppliedCashAdvance;
    }

    /**
     * Whether the entry has a cash advance applied to it. Format: true or false.
     */
    public function setHasAppliedCashAdvance(bool $hasAppliedCashAdvance): self
    {
        $this->hasAppliedCashAdvance = $hasAppliedCashAdvance;

        return $this;
    }

    /**
     * Indicates whether the expense has attendees. Format: true or false.
     */
    public function getHasAttendees(): bool
    {
        return $this->hasAttendees;
    }

    /**
     * Indicates whether the expense has attendees. Format: true or false.
     */
    public function setHasAttendees(bool $hasAttendees): self
    {
        $this->hasAttendees = $hasAttendees;

        return $this;
    }

    /**
     * Whether the expense has comments. Format: true or false.
     */
    public function getHasComments(): bool
    {
        return $this->hasComments;
    }

    /**
     * Whether the expense has comments. Format: true or false.
     */
    public function setHasComments(bool $hasComments): self
    {
        $this->hasComments = $hasComments;

        return $this;
    }

    /**
     * Whether the expense has exceptions. Format: true or false.
     */
    public function getHasExceptions(): bool
    {
        return $this->hasExceptions;
    }

    /**
     * Whether the expense has exceptions. Format: true or false.
     */
    public function setHasExceptions(bool $hasExceptions): self
    {
        $this->hasExceptions = $hasExceptions;

        return $this;
    }

    /**
     * Indicates whether there is an entry image attached to the entry. Format: true or false.
     */
    public function getHasImage(): bool
    {
        return $this->hasImage;
    }

    /**
     * Indicates whether there is an entry image attached to the entry. Format: true or false.
     */
    public function setHasImage(bool $hasImage): self
    {
        $this->hasImage = $hasImage;

        return $this;
    }

    /**
     * Indicates whether the expense has itemizations. Use the Format: true or false.
     */
    public function getHasItemizations(): bool
    {
        return $this->hasItemizations;
    }

    /**
     * Indicates whether the expense has itemizations. Use the Format: true or false.
     */
    public function setHasItemizations(bool $hasItemizations): self
    {
        $this->hasItemizations = $hasItemizations;

        return $this;
    }

    /**
     * Indicates whether the entry has VAT data. Format: true or false.
     */
    public function getHasVAT(): bool
    {
        return $this->hasVAT;
    }

    /**
     * Indicates whether the entry has VAT data. Format: true or false.
     */
    public function setHasVAT(bool $hasVAT): self
    {
        $this->hasVAT = $hasVAT;

        return $this;
    }

    /**
     * The unique identifier of the resource.
     */
    public function getID(): string
    {
        return $this->iD;
    }

    /**
     * The unique identifier of the resource.
     */
    public function setID(string $iD): self
    {
        $this->iD = $iD;

        return $this;
    }

    /**
     * Indicates whether the expense is billable. Format: true or false.
     */
    public function getIsBillable(): bool
    {
        return $this->isBillable;
    }

    /**
     * Indicates whether the expense is billable. Format: true or false.
     */
    public function setIsBillable(bool $isBillable): self
    {
        $this->isBillable = $isBillable;

        return $this;
    }

    /**
     * Indicates whether an entry image is required for the entry. Format: true or false.
     */
    public function getIsImageRequired(): bool
    {
        return $this->isImageRequired;
    }

    /**
     * Indicates whether an entry image is required for the entry. Format: true or false.
     */
    public function setIsImageRequired(bool $isImageRequired): self
    {
        $this->isImageRequired = $isImageRequired;

        return $this;
    }

    /**
     * Whether the entry is paid using the Expense Pay service. This element has a value if the report has reached the Processing Payment workflow step, because this is when Concur Expense determines whether it will be paid by Expense Pay. Format: true or false.
     */
    public function getIsPaidByExpensePay(): bool
    {
        return $this->isPaidByExpensePay;
    }

    /**
     * Whether the entry is paid using the Expense Pay service. This element has a value if the report has reached the Processing Payment workflow step, because this is when Concur Expense determines whether it will be paid by Expense Pay. Format: true or false.
     */
    public function setIsPaidByExpensePay(bool $isPaidByExpensePay): self
    {
        $this->isPaidByExpensePay = $isPaidByExpensePay;

        return $this;
    }

    /**
     * Indicates whether the expense is personal (that is, non-reimbursable). Format: true or false.
     */
    public function getIsPersonal(): bool
    {
        return $this->isPersonal;
    }

    /**
     * Indicates whether the expense is personal (that is, non-reimbursable). Format: true or false.
     */
    public function setIsPersonal(bool $isPersonal): self
    {
        $this->isPersonal = $isPersonal;

        return $this;
    }

    /**
     * Indicates whether the expense entry was imported from a personal card feed. Format: true or false.
     */
    public function getIsPersonalCardCharge(): bool
    {
        return $this->isPersonalCardCharge;
    }

    /**
     * Indicates whether the expense entry was imported from a personal card feed. Format: true or false.
     */
    public function setIsPersonalCardCharge(bool $isPersonalCardCharge): self
    {
        $this->isPersonalCardCharge = $isPersonalCardCharge;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getJourney()
    {
        return $this->journey;
    }

    /**
     * @param mixed $journey
     */
    public function setJourney($journey): self
    {
        $this->journey = $journey;

        return $this;
    }

    /**
     * The UTC date when the entry was last modified.
     *
     * @return mixed
     */
    public function getLastModified()
    {
        return $this->lastModified;
    }

    /**
     * The UTC date when the entry was last modified.
     *
     * @param mixed $lastModified
     */
    public function setLastModified($lastModified): self
    {
        $this->lastModified = $lastModified;

        return $this;
    }

    /**
     * The 2-letter ISO 3166-1 country code where the expense was incurred.
     */
    public function getLocationCountry(): ?string
    {
        return $this->locationCountry;
    }

    /**
     * The 2-letter ISO 3166-1 country code where the expense was incurred.
     */
    public function setLocationCountry(?string $locationCountry): self
    {
        $this->locationCountry = $locationCountry;

        return $this;
    }

    /**
     * The unique identifier for the location where the expense was incurred.
     */
    public function getLocationID(): ?string
    {
        return $this->locationID;
    }

    /**
     * The unique identifier for the location where the expense was incurred.
     */
    public function setLocationID(?string $locationID): self
    {
        $this->locationID = $locationID;

        return $this;
    }

    /**
     * The location where the expense was incurred, usually the city name.
     */
    public function getLocationName(): ?string
    {
        return $this->locationName;
    }

    /**
     * The location where the expense was incurred, usually the city name.
     */
    public function setLocationName(?string $locationName): self
    {
        $this->locationName = $locationName;

        return $this;
    }

    /**
     * The ISO 3166-2:2007 country subdivision state, province, or other country subdivision where the expense was incurred.
     */
    public function getLocationSubdivision(): ?string
    {
        return $this->locationSubdivision;
    }

    /**
     * The ISO 3166-2:2007 country subdivision state, province, or other country subdivision where the expense was incurred.
     */
    public function setLocationSubdivision(?string $locationSubdivision): self
    {
        $this->locationSubdivision = $locationSubdivision;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getOrgUnit1()
    {
        return $this->orgUnit1;
    }

    /**
     * @param mixed $orgUnit1
     */
    public function setOrgUnit1($orgUnit1): self
    {
        $this->orgUnit1 = $orgUnit1;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getOrgUnit2()
    {
        return $this->orgUnit2;
    }

    /**
     * @param mixed $orgUnit2
     */
    public function setOrgUnit2($orgUnit2): self
    {
        $this->orgUnit2 = $orgUnit2;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getOrgUnit3()
    {
        return $this->orgUnit3;
    }

    /**
     * @param mixed $orgUnit3
     */
    public function setOrgUnit3($orgUnit3): self
    {
        $this->orgUnit3 = $orgUnit3;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getOrgUnit4()
    {
        return $this->orgUnit4;
    }

    /**
     * @param mixed $orgUnit4
     */
    public function setOrgUnit4($orgUnit4): self
    {
        $this->orgUnit4 = $orgUnit4;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getOrgUnit5()
    {
        return $this->orgUnit5;
    }

    /**
     * @param mixed $orgUnit5
     */
    public function setOrgUnit5($orgUnit5): self
    {
        $this->orgUnit5 = $orgUnit5;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getOrgUnit6()
    {
        return $this->orgUnit6;
    }

    /**
     * @param mixed $orgUnit6
     */
    public function setOrgUnit6($orgUnit6): self
    {
        $this->orgUnit6 = $orgUnit6;

        return $this;
    }

    /**
     * The ID of the payment type for the entry. For mileage expenses, use the Cash payment type. For expense types with an expense code that uses a transaction amount instead of a distance, this element is required. This element should not be used for expense types with an expense code for Company Car or Personal Car, because these two expense codes always use the Cash payment type.
     */
    public function getPaymentTypeID(): string
    {
        return $this->paymentTypeID;
    }

    /**
     * The ID of the payment type for the entry. For mileage expenses, use the Cash payment type. For expense types with an expense code that uses a transaction amount instead of a distance, this element is required. This element should not be used for expense types with an expense code for Company Car or Personal Car, because these two expense codes always use the Cash payment type.
     */
    public function setPaymentTypeID(string $paymentTypeID): self
    {
        $this->paymentTypeID = $paymentTypeID;

        return $this;
    }

    /**
     * The name of the payment type, localized to the user's language.
     */
    public function getPaymentTypeName(): string
    {
        return $this->paymentTypeName;
    }

    /**
     * The name of the payment type, localized to the user's language.
     */
    public function setPaymentTypeName(string $paymentTypeName): self
    {
        $this->paymentTypeName = $paymentTypeName;

        return $this;
    }

    /**
     * The amount of the expense entry, in the report currency.
     */
    public function getPostedAmount(): float
    {
        return $this->postedAmount;
    }

    /**
     * The amount of the expense entry, in the report currency.
     */
    public function setPostedAmount(float $postedAmount): self
    {
        $this->postedAmount = $postedAmount;

        return $this;
    }

    /**
     * Indicates whether this entry has been reviewed by a processor. Format: true or false.
     */
    public function getReceiptReceived(): bool
    {
        return $this->receiptReceived;
    }

    /**
     * Indicates whether this entry has been reviewed by a processor. Format: true or false.
     */
    public function setReceiptReceived(bool $receiptReceived): self
    {
        $this->receiptReceived = $receiptReceived;

        return $this;
    }

    /**
     * The report ID of the report where the entry will be added.
     */
    public function getReportID(): string
    {
        return $this->reportID;
    }

    /**
     * The report ID of the report where the entry will be added.
     */
    public function setReportID(string $reportID): self
    {
        $this->reportID = $reportID;

        return $this;
    }

    /**
     * The login ID of the report owner.
     */
    public function getReportOwnerID(): string
    {
        return $this->reportOwnerID;
    }

    /**
     * The login ID of the report owner.
     */
    public function setReportOwnerID(string $reportOwnerID): self
    {
        $this->reportOwnerID = $reportOwnerID;

        return $this;
    }

    /**
     * The ID of the spending category that is specified for this expense entry.
     */
    public function getSpendCategoryCode(): string
    {
        return $this->spendCategoryCode;
    }

    /**
     * The ID of the spending category that is specified for this expense entry.
     */
    public function setSpendCategoryCode(string $spendCategoryCode): self
    {
        $this->spendCategoryCode = $spendCategoryCode;

        return $this;
    }

    /**
     * The name of the spending category that is specified for this expense entry, localized to the user's language.
     */
    public function getSpendCategoryName(): string
    {
        return $this->spendCategoryName;
    }

    /**
     * The name of the spending category that is specified for this expense entry, localized to the user's language.
     */
    public function setSpendCategoryName(string $spendCategoryName): self
    {
        $this->spendCategoryName = $spendCategoryName;

        return $this;
    }

    /**
     * The receipt type for this entry. Supported values: T - tax receipt, R - regular receipt, N - no receipt.
     */
    public function getTaxReceiptType(): string
    {
        return $this->taxReceiptType;
    }

    /**
     * The receipt type for this entry. Supported values: T - tax receipt, R - regular receipt, N - no receipt.
     */
    public function setTaxReceiptType(string $taxReceiptType): self
    {
        $this->taxReceiptType = $taxReceiptType;

        return $this;
    }

    /**
     * The amount of the expense entry, in the transaction currency paid to the vendor. For expense types with an expense code that uses a transaction amount instead of a distance, this element is required. This element should not be used for expense types with an expense code for Company Car or Personal Car, because these two expense codes use a distance instead of a transaction amount.
     */
    public function getTransactionAmount(): float
    {
        return $this->transactionAmount;
    }

    /**
     * The amount of the expense entry, in the transaction currency paid to the vendor. For expense types with an expense code that uses a transaction amount instead of a distance, this element is required. This element should not be used for expense types with an expense code for Company Car or Personal Car, because these two expense codes use a distance instead of a transaction amount.
     */
    public function setTransactionAmount(float $transactionAmount): self
    {
        $this->transactionAmount = $transactionAmount;

        return $this;
    }

    /**
     * The 3-letter ISO 4217 currency code for the expense entry transaction amount. This is the currency in which the vendor was paid. For expense types with an expense code that uses a transaction amount instead of a distance, this element is required. This element should not be used for expense types with an expense code for Company Car or Personal Car, because for these two expense codes the currency is always the Report Currency.
     */
    public function getTransactionCurrencyCode(): string
    {
        return $this->transactionCurrencyCode;
    }

    /**
     * The 3-letter ISO 4217 currency code for the expense entry transaction amount. This is the currency in which the vendor was paid. For expense types with an expense code that uses a transaction amount instead of a distance, this element is required. This element should not be used for expense types with an expense code for Company Car or Personal Car, because for these two expense codes the currency is always the Report Currency.
     */
    public function setTransactionCurrencyCode(string $transactionCurrencyCode): self
    {
        $this->transactionCurrencyCode = $transactionCurrencyCode;

        return $this;
    }

    /**
     * The date when the good or service associated with this expense entry was provided. Format: YYYY-MM-DD.
     *
     * @return mixed
     */
    public function getTransactionDate()
    {
        return $this->transactionDate;
    }

    /**
     * The date when the good or service associated with this expense entry was provided. Format: YYYY-MM-DD.
     *
     * @param mixed $transactionDate
     */
    public function setTransactionDate($transactionDate): self
    {
        $this->transactionDate = $transactionDate;

        return $this;
    }

    /**
     * The unique identifier of a trip in the Itinerary Service that includes a travel booking associated with this expense. This element is null when there is no trip associated with the expense.
     */
    public function getTripID(): ?string
    {
        return $this->tripID;
    }

    /**
     * The unique identifier of a trip in the Itinerary Service that includes a travel booking associated with this expense. This element is null when there is no trip associated with the expense.
     */
    public function setTripID(?string $tripID): self
    {
        $this->tripID = $tripID;

        return $this;
    }

    /**
     * The URI to the resource.
     */
    public function getURI(): string
    {
        return $this->uRI;
    }

    /**
     * The URI to the resource.
     */
    public function setURI(string $uRI): self
    {
        $this->uRI = $uRI;

        return $this;
    }

    /**
     * The name of the vendor for the expense entry. Maximum length: 64 characters.
     */
    public function getVendorDescription(): ?string
    {
        return $this->vendorDescription;
    }

    /**
     * The name of the vendor for the expense entry. Maximum length: 64 characters.
     */
    public function setVendorDescription(?string $vendorDescription): self
    {
        $this->vendorDescription = $vendorDescription;

        return $this;
    }

    /**
     * The unique identifier for a vendor list item.
     */
    public function getVendorListItemID(): ?string
    {
        return $this->vendorListItemID;
    }

    /**
     * The unique identifier for a vendor list item.
     */
    public function setVendorListItemID(?string $vendorListItemID): self
    {
        $this->vendorListItemID = $vendorListItemID;

        return $this;
    }

    /**
     * The name of an item from a vendor list.
     */
    public function getVendorListItemName(): ?string
    {
        return $this->vendorListItemName;
    }

    /**
     * The name of an item from a vendor list.
     */
    public function setVendorListItemName(?string $vendorListItemName): self
    {
        $this->vendorListItemName = $vendorListItemName;

        return $this;
    }
}
