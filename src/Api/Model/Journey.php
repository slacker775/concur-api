<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Concur\Api\Model;

class Journey
{
    /**
     * The portion of the journey for business use, in the report owner's unit of measure for distances. This element is required in order to post a personal car mileage expense entry, or to post a company car mileage expense when there is no PersonalDistance value. When using the Odometer elements, the sum of PersonalDistance and BusinessDistance must equal the difference between OdometerEnd and OdometerStart.
     *
     * @var int
     */
    protected $businessDistance;
    /**
     * Indicates where the journey ended. This is also known as the "To Location". Maximum length: 100 characters.
     *
     * @var string
     */
    protected $endLocation;
    /**
     * The number of people in the vehicle during the journey. Used with Variable-Rate, Personal or Company Car.
     *
     * @var int
     */
    protected $numberOfPassengers;
    /**
     * The odometer reading at the end of the journey. The value must be greater than the OdometerStart value. This element is used with Variable-Rate and Company Car configuration types.
     *
     * @var int
     */
    protected $odometerEnd;
    /**
     * The odometer reading at the start of the journey. This element is used with Variable-Rate and Company Car configuration types.
     *
     * @var int
     */
    protected $odometerStart;
    /**
     * The portion of the journey for personal use. This element is required in order to post a company car mileage expense when there is no BusinessDistance value. Format: positive integer. When using the Odometer elements, the sum of PersonalDistance and BusinessDistance must equal the difference between OdometerEnd and OdometerStart. Used with Company Car configuration types.
     *
     * @var int
     */
    protected $personalDistance;
    /**
     * Indicates where the journey started. This is also known as the "From Location". Maximum length: 100 characters.
     *
     * @var string
     */
    protected $startLocation;
    /**
     * The unit of measure for distance and odometer values. Supported values: M - miles, K - kilometers.
     *
     * @var string
     */
    protected $unitOfMeasure;
    /**
     * The unique identifier for the vehicle used for this journey. This element is used only with Company Car configuration types. Use the GET Vehicles function to learn the Vehicle ID.
     *
     * @var string
     */
    protected $vehicleID;

    /**
     * The portion of the journey for business use, in the report owner's unit of measure for distances. This element is required in order to post a personal car mileage expense entry, or to post a company car mileage expense when there is no PersonalDistance value. When using the Odometer elements, the sum of PersonalDistance and BusinessDistance must equal the difference between OdometerEnd and OdometerStart.
     */
    public function getBusinessDistance(): int
    {
        return $this->businessDistance;
    }

    /**
     * The portion of the journey for business use, in the report owner's unit of measure for distances. This element is required in order to post a personal car mileage expense entry, or to post a company car mileage expense when there is no PersonalDistance value. When using the Odometer elements, the sum of PersonalDistance and BusinessDistance must equal the difference between OdometerEnd and OdometerStart.
     */
    public function setBusinessDistance(int $businessDistance): self
    {
        $this->businessDistance = $businessDistance;

        return $this;
    }

    /**
     * Indicates where the journey ended. This is also known as the "To Location". Maximum length: 100 characters.
     */
    public function getEndLocation(): string
    {
        return $this->endLocation;
    }

    /**
     * Indicates where the journey ended. This is also known as the "To Location". Maximum length: 100 characters.
     */
    public function setEndLocation(string $endLocation): self
    {
        $this->endLocation = $endLocation;

        return $this;
    }

    /**
     * The number of people in the vehicle during the journey. Used with Variable-Rate, Personal or Company Car.
     */
    public function getNumberOfPassengers(): int
    {
        return $this->numberOfPassengers;
    }

    /**
     * The number of people in the vehicle during the journey. Used with Variable-Rate, Personal or Company Car.
     */
    public function setNumberOfPassengers(int $numberOfPassengers): self
    {
        $this->numberOfPassengers = $numberOfPassengers;

        return $this;
    }

    /**
     * The odometer reading at the end of the journey. The value must be greater than the OdometerStart value. This element is used with Variable-Rate and Company Car configuration types.
     */
    public function getOdometerEnd(): int
    {
        return $this->odometerEnd;
    }

    /**
     * The odometer reading at the end of the journey. The value must be greater than the OdometerStart value. This element is used with Variable-Rate and Company Car configuration types.
     */
    public function setOdometerEnd(int $odometerEnd): self
    {
        $this->odometerEnd = $odometerEnd;

        return $this;
    }

    /**
     * The odometer reading at the start of the journey. This element is used with Variable-Rate and Company Car configuration types.
     */
    public function getOdometerStart(): int
    {
        return $this->odometerStart;
    }

    /**
     * The odometer reading at the start of the journey. This element is used with Variable-Rate and Company Car configuration types.
     */
    public function setOdometerStart(int $odometerStart): self
    {
        $this->odometerStart = $odometerStart;

        return $this;
    }

    /**
     * The portion of the journey for personal use. This element is required in order to post a company car mileage expense when there is no BusinessDistance value. Format: positive integer. When using the Odometer elements, the sum of PersonalDistance and BusinessDistance must equal the difference between OdometerEnd and OdometerStart. Used with Company Car configuration types.
     */
    public function getPersonalDistance(): int
    {
        return $this->personalDistance;
    }

    /**
     * The portion of the journey for personal use. This element is required in order to post a company car mileage expense when there is no BusinessDistance value. Format: positive integer. When using the Odometer elements, the sum of PersonalDistance and BusinessDistance must equal the difference between OdometerEnd and OdometerStart. Used with Company Car configuration types.
     */
    public function setPersonalDistance(int $personalDistance): self
    {
        $this->personalDistance = $personalDistance;

        return $this;
    }

    /**
     * Indicates where the journey started. This is also known as the "From Location". Maximum length: 100 characters.
     */
    public function getStartLocation(): string
    {
        return $this->startLocation;
    }

    /**
     * Indicates where the journey started. This is also known as the "From Location". Maximum length: 100 characters.
     */
    public function setStartLocation(string $startLocation): self
    {
        $this->startLocation = $startLocation;

        return $this;
    }

    /**
     * The unit of measure for distance and odometer values. Supported values: M - miles, K - kilometers.
     */
    public function getUnitOfMeasure(): string
    {
        return $this->unitOfMeasure;
    }

    /**
     * The unit of measure for distance and odometer values. Supported values: M - miles, K - kilometers.
     */
    public function setUnitOfMeasure(string $unitOfMeasure): self
    {
        $this->unitOfMeasure = $unitOfMeasure;

        return $this;
    }

    /**
     * The unique identifier for the vehicle used for this journey. This element is used only with Company Car configuration types. Use the GET Vehicles function to learn the Vehicle ID.
     */
    public function getVehicleID(): string
    {
        return $this->vehicleID;
    }

    /**
     * The unique identifier for the vehicle used for this journey. This element is used only with Company Car configuration types. Use the GET Vehicles function to learn the Vehicle ID.
     */
    public function setVehicleID(string $vehicleID): self
    {
        $this->vehicleID = $vehicleID;

        return $this;
    }
}
