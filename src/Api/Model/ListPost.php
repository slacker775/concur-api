<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Concur\Api\Model;

class ListPost
{
    /**
     * Optional. Defines the encrypted ConnectorID. If not provided then the list isn't associated with a connector.
     *
     * @var string
     */
    protected $connectorID;
    /**
     * Required. Defines whether CODE should appear before TEXT, or vice-versa.
     *
     * @var bool
     */
    protected $displayCodeFirst;
    /**
     * Optional. Default value is 1. Defines the threshold from where the level starts being external. This value can only be set if a ConnectorID is provided.
     *
     * @var int
     */
    protected $externalThreshold;
    /**
     * Required. Defines whether it is a vendor list.
     *
     * @var bool
     */
    protected $isVendorList;
    /**
     * Required. Defines a name for the list. This name must be unique.
     *
     * @var string
     */
    protected $name;
    /**
     * Required. Defines whether the search criteria should apply to the CODE or to the TEXT.
     *
     * @var string
     */
    protected $searchCriteriaCode;

    /**
     * Optional. Defines the encrypted ConnectorID. If not provided then the list isn't associated with a connector.
     */
    public function getConnectorID(): string
    {
        return $this->connectorID;
    }

    /**
     * Optional. Defines the encrypted ConnectorID. If not provided then the list isn't associated with a connector.
     */
    public function setConnectorID(string $connectorID): self
    {
        $this->connectorID = $connectorID;

        return $this;
    }

    /**
     * Required. Defines whether CODE should appear before TEXT, or vice-versa.
     */
    public function getDisplayCodeFirst(): bool
    {
        return $this->displayCodeFirst;
    }

    /**
     * Required. Defines whether CODE should appear before TEXT, or vice-versa.
     */
    public function setDisplayCodeFirst(bool $displayCodeFirst): self
    {
        $this->displayCodeFirst = $displayCodeFirst;

        return $this;
    }

    /**
     * Optional. Default value is 1. Defines the threshold from where the level starts being external. This value can only be set if a ConnectorID is provided.
     */
    public function getExternalThreshold(): int
    {
        return $this->externalThreshold;
    }

    /**
     * Optional. Default value is 1. Defines the threshold from where the level starts being external. This value can only be set if a ConnectorID is provided.
     */
    public function setExternalThreshold(int $externalThreshold): self
    {
        $this->externalThreshold = $externalThreshold;

        return $this;
    }

    /**
     * Required. Defines whether it is a vendor list.
     */
    public function getIsVendorList(): bool
    {
        return $this->isVendorList;
    }

    /**
     * Required. Defines whether it is a vendor list.
     */
    public function setIsVendorList(bool $isVendorList): self
    {
        $this->isVendorList = $isVendorList;

        return $this;
    }

    /**
     * Required. Defines a name for the list. This name must be unique.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Required. Defines a name for the list. This name must be unique.
     */
    public function setName(string $name): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Required. Defines whether the search criteria should apply to the CODE or to the TEXT.
     */
    public function getSearchCriteriaCode(): string
    {
        return $this->searchCriteriaCode;
    }

    /**
     * Required. Defines whether the search criteria should apply to the CODE or to the TEXT.
     */
    public function setSearchCriteriaCode(string $searchCriteriaCode): self
    {
        $this->searchCriteriaCode = $searchCriteriaCode;

        return $this;
    }
}
