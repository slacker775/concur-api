<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Concur\Api\Endpoint;

class GetExpenseEntry extends \Jane\OpenApiRuntime\Client\BaseEndpoint implements \Jane\OpenApiRuntime\Client\Psr7Endpoint
{
    /**
     * Gets all expense entries owned by the user.
     *
     * @param array $queryParameters {
     *
     *     @var string $reportID The report ID of the entries to be retrieved.  Format: An alpha-numeric GUID string.
     *     @var string $paymentTypeID the ID of the payment type of the entries to be retrieved
     *     @var string $batchID The batch ID for the entries to be retrieved. The batch ID identifies the batch that contains the report payee associated with the entries.
     *     @var bool $isBillable Determines whether the operation retrieves entries that are billable. Format: true or false
     *     @var string $attendeeTypeCode the ID of the attendee type for the entries to be retrieved
     *     @var bool $hasAttendees Determines whether the operation retrieves entries that have attendees. Format: true or false
     *     @var bool $hasVAT Determines whether the operation retrieves entries that have VAT details. Format: true or false
     *     @var string $expenseTypeCode the code for the expense type for the entries to be retrieved
     *     @var string $attendeeID the attendee associated with the entries to be retrieved
     *     @var string $offset the starting point of the next set of results, after the limit specified in the limit field has been reached
     *     @var int $limit The number of records to return. Default value: 25
     *     @var string $user The login ID of the user who owns the entries. The user must have the Web Services Admin role to use this parameter.
     * }
     */
    public function __construct(array $queryParameters = [])
    {
        $this->queryParameters = $queryParameters;
    }

    use \Jane\OpenApiRuntime\Client\Psr7EndpointTrait;

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return '/expense/entries';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['reportID', 'paymentTypeID', 'batchID', 'isBillable', 'attendeeTypeCode', 'hasAttendees', 'hasVAT', 'expenseTypeCode', 'attendeeID', 'offset', 'limit', 'user']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->setAllowedTypes('reportID', ['string']);
        $optionsResolver->setAllowedTypes('paymentTypeID', ['string']);
        $optionsResolver->setAllowedTypes('batchID', ['string']);
        $optionsResolver->setAllowedTypes('isBillable', ['bool']);
        $optionsResolver->setAllowedTypes('attendeeTypeCode', ['string']);
        $optionsResolver->setAllowedTypes('hasAttendees', ['bool']);
        $optionsResolver->setAllowedTypes('hasVAT', ['bool']);
        $optionsResolver->setAllowedTypes('expenseTypeCode', ['string']);
        $optionsResolver->setAllowedTypes('attendeeID', ['string']);
        $optionsResolver->setAllowedTypes('offset', ['string']);
        $optionsResolver->setAllowedTypes('limit', ['int']);
        $optionsResolver->setAllowedTypes('user', ['string']);

        return $optionsResolver;
    }

    /**
     * {@inheritdoc}
     *
     * @return \Concur\Api\Model\EntryCollection|null
     */
    protected function transformResponseBody(string $body, int $status, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        if (200 === $status && mb_strpos($contentType, 'application/json') !== false) {
            return $serializer->deserialize($body, 'Concur\\Api\\Model\\EntryCollection', 'json');
        }
    }
}
