<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Concur\Api\Endpoint;

class GetCommonUser extends \Jane\OpenApiRuntime\Client\BaseEndpoint implements \Jane\OpenApiRuntime\Client\Psr7Endpoint
{
    /**
     * Retrieves all users based on the search criteria.
     *
     * @param array $queryParameters {
     *
     *     @var string $offset the starting point of the next set of results, after the limit specified in the limit field has been reached
     *     @var int $limit The number of records to return. Default value: 25. Maximum: 100.
     *     @var string $primaryEmail the primary email of the user
     *     @var string $employeeID the employee ID of the user
     *     @var string $user the login ID of the user
     *     @var string $lastName the last name of the user
     *     @var bool $active Indicates whether to return active or inactive users. FORMAT: true or false
     * }
     */
    public function __construct(array $queryParameters = [])
    {
        $this->queryParameters = $queryParameters;
    }

    use \Jane\OpenApiRuntime\Client\Psr7EndpointTrait;

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return '/common/users';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['offset', 'limit', 'primaryEmail', 'employeeID', 'user', 'lastName', 'active']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->setAllowedTypes('offset', ['string']);
        $optionsResolver->setAllowedTypes('limit', ['int']);
        $optionsResolver->setAllowedTypes('primaryEmail', ['string']);
        $optionsResolver->setAllowedTypes('employeeID', ['string']);
        $optionsResolver->setAllowedTypes('user', ['string']);
        $optionsResolver->setAllowedTypes('lastName', ['string']);
        $optionsResolver->setAllowedTypes('active', ['bool']);

        return $optionsResolver;
    }

    /**
     * {@inheritdoc}
     *
     * @throws \Concur\Api\Exception\GetCommonUserUnauthorizedException
     * @throws \Concur\Api\Exception\GetCommonUserForbiddenException
     *
     * @return \Concur\Api\Model\UserCollection|null
     */
    protected function transformResponseBody(string $body, int $status, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        if (200 === $status && mb_strpos($contentType, 'application/json') !== false) {
            return $serializer->deserialize($body, 'Concur\\Api\\Model\\UserCollection', 'json');
        }
        if (401 === $status && mb_strpos($contentType, 'application/json') !== false) {
            throw new \Concur\Api\Exception\GetCommonUserUnauthorizedException();
        }
        if (403 === $status && mb_strpos($contentType, 'application/json') !== false) {
            throw new \Concur\Api\Exception\GetCommonUserForbiddenException();
        }
    }
}
