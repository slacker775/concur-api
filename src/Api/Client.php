<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Concur\Api;

class Client extends \Jane\OpenApiRuntime\Client\Psr18Client
{
    /**
     * Returns all reports owned by the user based on the search criteria.
     *
     * @param array $queryParameters {
     *
     *     @var string $offset Starting page offset
     *     @var int $limit Number of records to return (default 25)
     *     @var string $user Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter.
     *     @var string $approvalStatusCode The status code for the Approval Status. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: A_AAFH - Report submission triggered an anomaly and fraud check; A_ACCO - Report is pending reviews; A_APPR - Report has been approved; A_EXTV - Report is pending external validation; A_FILE - Report has been submitted; A_NOTF - Report has not been submitted; A_PBDG - Report approval is pending Budget approval; A_PECO - Report approval is pending Cost object approval; A_PEND - Report is pending manager approval; A_PVAL - Report is pending prepayment validation; A_RESU - Report needs to be resubmitted; A_RHLD - Report submission is pending receipt images; A_TEXP - Report expired in approval queue. For custom codes, contact Concur Developer Support.
     *     @var string $paymentStatusCode The payment status code for the report. The values can include Concur Expense standard codes or custom codes. The Concur Expense standard code values are: P_HOLD - Report payment is on hold; P_NOTP - Report has not been paid; P_PAID - Report has been paid; P_PAYC - Payment is confirmed. Some or all of the report expenses have been paid; P_PROC - Report is in process to be paid. For custom codes, contact Concur Developer Support.
     *     @var string $currencyCode The 3-letter ISO 4217 currency code for the report currency. Example: USD.
     *     @var string $paymentType The unique identifier for the payment type that is the payment type for at least one expense entry in the report. Use PaymentTypeID from the "GET Expense Group Configurations" function.
     *     @var string $reimbursementMethod The method the report owner will be reimbursed. VALUES: ADPPAYR - ADP Payroll; APCHECK - AP (Company Check); CNQRPAY - Expense Pay; PMTSERV - Other Payment Service. NOTE: PAY_PAL is NOT supported.
     *     @var string $approverLoginID the login ID for the report approver that is the current approver assigned to the report
     *     @var string $expenseTypeCode The expense type code that is the expense type for at least one expense entry in the report. Use ExpenseTypeCode from the "GET Expense Group Configurations" function.
     *     @var string $attendeeTypeCode the report contains expense entries that have attendees of the specified type
     *     @var string $countryCode The report country. Maximum 2 characters. Format: The ISO 3166-1 alpha-2 country code. Example: United States is US.
     *     @var string $batchID The unique identifier for a payment batch where there is at least one report payee within the report. Use the BatchID from the "GET Payment Batch List" function.
     *     @var string $vendorName the Vendor Description that is the vendor for at least one expense entry in the report
     *     @var bool $hasVAT Determines if the report has at least one expense entry with VAT details. Format: true or false.
     *     @var bool $hasImages Determines if the report has at least one expense entry with an entry image or if there is a report image for this report. Format: true or false.
     *     @var bool $hasAttendees Determines if the report has at least one expense entry with an attendee. Format: true or false.
     *     @var bool $hasBillableExpenses The IsBillable flag for at least one expense entry in the report. Format: true or false.
     *     @var bool $isTestUser The report owner is a test user using the report for testing purposes in a non-production envirnment. format: true or false.
     *     @var string $expenseGroupConfigID The unique identifier for the expense group configuration associated to the report's expense group. Use the ID from the "GET Expense Group Configurations" function.
     *     @var string $entryTransactionDateBefore The entry transaction date for at least one expense entry in the report is before this date.Format: YYYY-MM-DD
     *     @var string $entryTransactionDateAfter The entry transaction date for at least one expense entry in the report is after this date.Format: YYYY-MM-DD
     *     @var string $createDateBefore The report create date is before this date.Format: YYYY-MM-DD
     *     @var string $createDateAfter The report create date is after this date.Format: YYYY-MM-DD
     *     @var string $userDefinedDateBefore The report user defined date is before this date.Format: YYYY-MM-DD
     *     @var string $userDefinedDateAfter The report user defined date is after this date.Format: YYYY-MM-DD
     *     @var string $submitDateBefore The report submit date is before this date.Format: YYYY-MM-DD
     *     @var string $submitDateAfter The report submit date is after this date.Format: YYYY-MM-DD
     *     @var string $processingPaymentDateBefore The report processing payment date is before this date.Format: YYYY-MM-DD
     *     @var string $processingPaymentDateAfter The report processing payment date is after this date. Format: YYYY-MM-DD
     *     @var string $paidDateBefore The report paid date is before this date.Format: YYYY-MM-DD
     *     @var string $paidDateAfter The report paid date is after this date.Format: YYYY-MM-DD
     *     @var string $modifiedDateBefore The report modified date is before this date.Format: YYYY-MM-DD
     *     @var string $modifiedDateAfter The report modified date is after this date.Format: YYYY-MM-DD
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Concur\Api\Model\ReportCollection|\Psr\Http\Message\ResponseInterface|null
     */
    public function getExpenseReport(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Concur\Api\Endpoint\GetExpenseReport($queryParameters), $fetch);
    }

    /**
     * Create an expense report with the supplied data.
     *
     * @param array $queryParameters {
     *
     *     @var string $user Optional. The login ID for the Report Owner.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Concur\Api\Exception\PostExpenseReportBadRequestException
     *
     * @return \Concur\Api\Model\CreateResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function postExpenseReport(\Concur\Api\Model\ReportPost $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Concur\Api\Endpoint\PostExpenseReport($requestBody, $queryParameters), $fetch);
    }

    /**
     * Returns the specified report.
     *
     * @param string $id              Report ID
     * @param array  $queryParameters {
     *
     *     @var string $user Optional. The login ID of the report owner(s) to use when searching for reports. If the value is set to LoginID, reports for the report owner with this login ID value are returned. If the value is set to ALL, reports for all report owners are returned. If this parameter is not specified, reports for the OAuth Consumer are returned. The access token owner (OAuth Consumer) must have the Web Services Admin role to use this parameter.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Concur\Api\Model\ReportGet|\Psr\Http\Message\ResponseInterface|null
     */
    public function getExpenseReportById(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Concur\Api\Endpoint\GetExpenseReportById($id, $queryParameters), $fetch);
    }

    /**
     * Updates the report specified in the URL. Only the provided fields will be updated, missing fields will not be altered.
     *
     * @param string $id              the unique identifier for the report
     * @param array  $queryParameters {
     *
     *     @var string $user Optional. The login ID for the Report Owner.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Concur\Api\Exception\PutExpenseReportByIdBadRequestException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function putExpenseReportById(string $id, \Concur\Api\Model\ReportPut $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Concur\Api\Endpoint\PutExpenseReportById($id, $requestBody, $queryParameters), $fetch);
    }

    /**
     * Returns all list items based on the search criteria.
     *
     * @param array $queryParameters {
     *
     *     @var int $limit The number of records to return. The default is 25 and the maximum is 100.
     *     @var string $offset The start of the page offset. The default is from the beginning.
     *     @var string $listId the unique identifier for the list this item is a member of
     *     @var string $name The name of the list item. Maximum length: 64.
     *     @var string $parentId The unique identifier of this item's parent. Empty when there is no parent.
     *     @var string $level1Code The item code for the first level of the list. All lists have at least a Level1Code. Maximum 32 characters
     *     @var string $level2Code The item code for the second level of the list. Empty when this level doesn't exist in the list. Maximum 32 characters
     *     @var string $level3Code The item code for the third level of the list. Empty when this level doesn't exist in the list. Maximum 32 characters
     *     @var string $level4Code The item code for the fourth level of the list. Empty when this level doesn't exist in the list. Maximum 32 characters
     *     @var string $level5Code The item code for the fifth level of the list. Empty when this level doesn't exist in the list. Maximum 32 characters
     *     @var string $level6Code The item code for the sixth level of the list. Empty when this level doesn't exist in the list. Maximum 32 characters
     *     @var string $level7Code The item code for the seventh level of the list. Empty when this level doesn't exist in the list. Maximum 32 characters
     *     @var string $level8Code The item code for the eighth level of the list. Empty when this level doesn't exist in the list. Maximum 32 characters
     *     @var string $level9Code The item code for the ninth level of the list. Empty when this level doesn't exist in the list. Maximum 32 characters
     *     @var string $level10Code The item code for the tenth level of the list. Empty when this level doesn't exist in the list. Maximum 32 characters
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Concur\Api\Model\ListItemGetCollection|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCommonListitem(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Concur\Api\Endpoint\GetCommonListitem($queryParameters), $fetch);
    }

    /**
     * Creates a new item in the specified list.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Concur\Api\Exception\PostCommonListitemBadRequestException
     *
     * @return \Concur\Api\Model\CreateResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCommonListitem(\Concur\Api\Model\ListItemPost $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Concur\Api\Endpoint\PostCommonListitem($requestBody), $fetch);
    }

    /**
     * Deletes the specified list item.
     *
     * @param string $id              The unique identifier of the list item to delete
     * @param array  $queryParameters {
     *
     *     @var string $listId The unique identifier of the list associated with a list item to be deleted
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Concur\Api\Exception\DeleteCommonListitemByIdBadRequestException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function deleteCommonListitemById(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Concur\Api\Endpoint\DeleteCommonListitemById($id, $queryParameters), $fetch);
    }

    /**
     * Returns the specified list item.
     *
     * @param string $id              the unique identifier for the list item
     * @param array  $queryParameters {
     *
     *     @var string $listId The unique identifier for the list this item is a member.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Concur\Api\Model\ListItemGet|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCommonListitemById(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Concur\Api\Endpoint\GetCommonListitemById($id, $queryParameters), $fetch);
    }

    /**
     * Updates the specified list item. Only the provided fields will be updated, missing fields will not be altered.
     *
     * @param string $id    the unique identifier for the list item
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Concur\Api\Exception\PutCommonListitemByIdBadRequestException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function putCommonListitemById(string $id, \Concur\Api\Model\ListItemPut $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Concur\Api\Endpoint\PutCommonListitemById($id, $requestBody), $fetch);
    }

    /**
     * Returns all lists based on the search criteria.
     *
     * @param array $queryParameters {
     *
     *     @var int $limit The number of records to return. The default is 25 and the maximum is 100.
     *     @var string $offset The start of the page offset. The default is from the beginning.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Concur\Api\Model\ListGetCollection|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCommonList(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Concur\Api\Endpoint\GetCommonList($queryParameters), $fetch);
    }

    /**
     * Create a new list.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Concur\Api\Model\CreateResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCommonList(\Concur\Api\Model\ListPost $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Concur\Api\Endpoint\PostCommonList($requestBody), $fetch);
    }

    /**
     * Returns a list by ID.
     *
     * @param string $id    the unique identifier for the list
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Concur\Api\Model\ListGet|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCommonListById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Concur\Api\Endpoint\GetCommonListById($id), $fetch);
    }

    /**
     * Retrieves all users based on the search criteria.
     *
     * @param array $queryParameters {
     *
     *     @var string $offset the starting point of the next set of results, after the limit specified in the limit field has been reached
     *     @var int $limit The number of records to return. Default value: 25. Maximum: 100.
     *     @var string $primaryEmail the primary email of the user
     *     @var string $employeeID the employee ID of the user
     *     @var string $user the login ID of the user
     *     @var string $lastName the last name of the user
     *     @var bool $active Indicates whether to return active or inactive users. FORMAT: true or false
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Concur\Api\Exception\GetCommonUserUnauthorizedException
     * @throws \Concur\Api\Exception\GetCommonUserForbiddenException
     *
     * @return \Concur\Api\Model\UserCollection|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCommonUser(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Concur\Api\Endpoint\GetCommonUser($queryParameters), $fetch);
    }

    public static function create($httpClient = null)
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\Psr17FactoryDiscovery::findUrlFactory()->createUri('https://www.concursolutions.com/api/v3.0');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            $plugins[] = new \Http\Client\Common\Plugin\AddPathPlugin($uri);
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $serializer = new \Symfony\Component\Serializer\Serializer(\Concur\Api\Normalizer\NormalizerFactory::create(), [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode())]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
