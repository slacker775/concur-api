<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Concur\Api\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class RideDetailNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Concur\\Api\\Model\\RideDetail';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'Concur\\Api\\Model\\RideDetail';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Concur\Api\Model\RideDetail();
        if (property_exists($data, 'DriverName')) {
            $object->setDriverName($data->{'DriverName'});
        }
        if (property_exists($data, 'DropoffLatitude')) {
            $object->setDropoffLatitude($data->{'DropoffLatitude'});
        }
        if (property_exists($data, 'DropoffLongitude')) {
            $object->setDropoffLongitude($data->{'DropoffLongitude'});
        }
        if (property_exists($data, 'EndDateTime')) {
            $object->setEndDateTime(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'EndDateTime'}));
        }
        if (property_exists($data, 'LineItems')) {
            $object->setLineItems($this->denormalizer->denormalize($data->{'LineItems'}, 'Concur\\Api\\Model\\LineItem', 'json', $context));
        }
        if (property_exists($data, 'StartDateTime')) {
            $object->setStartDateTime(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'StartDateTime'}));
        }
        if (property_exists($data, 'VehicleNumber')) {
            $object->setVehicleNumber($data->{'VehicleNumber'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getDriverName()) {
            $data->{'DriverName'} = $object->getDriverName();
        }
        if (null !== $object->getDropoffLatitude()) {
            $data->{'DropoffLatitude'} = $object->getDropoffLatitude();
        }
        if (null !== $object->getDropoffLongitude()) {
            $data->{'DropoffLongitude'} = $object->getDropoffLongitude();
        }
        if (null !== $object->getEndDateTime()) {
            $data->{'EndDateTime'} = $object->getEndDateTime()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getLineItems()) {
            $data->{'LineItems'} = $this->normalizer->normalize($object->getLineItems(), 'json', $context);
        }
        if (null !== $object->getStartDateTime()) {
            $data->{'StartDateTime'} = $object->getStartDateTime()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getVehicleNumber()) {
            $data->{'VehicleNumber'} = $object->getVehicleNumber();
        }

        return $data;
    }
}
