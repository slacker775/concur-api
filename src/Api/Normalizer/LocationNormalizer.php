<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Concur\Api\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class LocationNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Concur\\Api\\Model\\Location';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'Concur\\Api\\Model\\Location';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Concur\Api\Model\Location();
        if (property_exists($data, 'Address')) {
            $object->setAddress($data->{'Address'});
        }
        if (property_exists($data, 'Address2')) {
            $object->setAddress2($data->{'Address2'});
        }
        if (property_exists($data, 'City')) {
            $object->setCity($data->{'City'});
        }
        if (property_exists($data, 'CountryCode')) {
            $object->setCountryCode($data->{'CountryCode'});
        }
        if (property_exists($data, 'CountrySubdivisionCode')) {
            $object->setCountrySubdivisionCode($data->{'CountrySubdivisionCode'});
        }
        if (property_exists($data, 'EmailAddress')) {
            $object->setEmailAddress($data->{'EmailAddress'});
        }
        if (property_exists($data, 'FaxNumber')) {
            $object->setFaxNumber($data->{'FaxNumber'});
        }
        if (property_exists($data, 'InternetAddress')) {
            $object->setInternetAddress($data->{'InternetAddress'});
        }
        if (property_exists($data, 'Name')) {
            $object->setName($data->{'Name'});
        }
        if (property_exists($data, 'PostalCode')) {
            $object->setPostalCode($data->{'PostalCode'});
        }
        if (property_exists($data, 'TelephoneNumber')) {
            $object->setTelephoneNumber($data->{'TelephoneNumber'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAddress()) {
            $data->{'Address'} = $object->getAddress();
        }
        if (null !== $object->getAddress2()) {
            $data->{'Address2'} = $object->getAddress2();
        }
        if (null !== $object->getCity()) {
            $data->{'City'} = $object->getCity();
        }
        if (null !== $object->getCountryCode()) {
            $data->{'CountryCode'} = $object->getCountryCode();
        }
        if (null !== $object->getCountrySubdivisionCode()) {
            $data->{'CountrySubdivisionCode'} = $object->getCountrySubdivisionCode();
        }
        if (null !== $object->getEmailAddress()) {
            $data->{'EmailAddress'} = $object->getEmailAddress();
        }
        if (null !== $object->getFaxNumber()) {
            $data->{'FaxNumber'} = $object->getFaxNumber();
        }
        if (null !== $object->getInternetAddress()) {
            $data->{'InternetAddress'} = $object->getInternetAddress();
        }
        if (null !== $object->getName()) {
            $data->{'Name'} = $object->getName();
        }
        if (null !== $object->getPostalCode()) {
            $data->{'PostalCode'} = $object->getPostalCode();
        }
        if (null !== $object->getTelephoneNumber()) {
            $data->{'TelephoneNumber'} = $object->getTelephoneNumber();
        }

        return $data;
    }
}
