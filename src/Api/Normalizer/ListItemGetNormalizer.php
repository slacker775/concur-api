<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Concur\Api\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ListItemGetNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Concur\\Api\\Model\\ListItemGet';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'Concur\\Api\\Model\\ListItemGet';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Concur\Api\Model\ListItemGet();
        if (property_exists($data, 'ID')) {
            $object->setID($data->{'ID'});
        }
        if (property_exists($data, 'Level10Code')) {
            $object->setLevel10Code($data->{'Level10Code'});
        }
        if (property_exists($data, 'Level1Code')) {
            $object->setLevel1Code($data->{'Level1Code'});
        }
        if (property_exists($data, 'Level2Code')) {
            $object->setLevel2Code($data->{'Level2Code'});
        }
        if (property_exists($data, 'Level3Code')) {
            $object->setLevel3Code($data->{'Level3Code'});
        }
        if (property_exists($data, 'Level4Code')) {
            $object->setLevel4Code($data->{'Level4Code'});
        }
        if (property_exists($data, 'Level5Code')) {
            $object->setLevel5Code($data->{'Level5Code'});
        }
        if (property_exists($data, 'Level6Code')) {
            $object->setLevel6Code($data->{'Level6Code'});
        }
        if (property_exists($data, 'Level7Code')) {
            $object->setLevel7Code($data->{'Level7Code'});
        }
        if (property_exists($data, 'Level8Code')) {
            $object->setLevel8Code($data->{'Level8Code'});
        }
        if (property_exists($data, 'Level9Code')) {
            $object->setLevel9Code($data->{'Level9Code'});
        }
        if (property_exists($data, 'ListID')) {
            $object->setListID($data->{'ListID'});
        }
        if (property_exists($data, 'Name')) {
            $object->setName($data->{'Name'});
        }
        if (property_exists($data, 'ParentID')) {
            $object->setParentID($data->{'ParentID'});
        }
        if (property_exists($data, 'URI')) {
            $object->setURI($data->{'URI'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getID()) {
            $data->{'ID'} = $object->getID();
        }
        $data->{'Level10Code'} = $object->getLevel10Code();
        $data->{'Level1Code'} = $object->getLevel1Code();
        $data->{'Level2Code'} = $object->getLevel2Code();
        $data->{'Level3Code'} = $object->getLevel3Code();
        $data->{'Level4Code'} = $object->getLevel4Code();
        $data->{'Level5Code'} = $object->getLevel5Code();
        $data->{'Level6Code'} = $object->getLevel6Code();
        $data->{'Level7Code'} = $object->getLevel7Code();
        $data->{'Level8Code'} = $object->getLevel8Code();
        $data->{'Level9Code'} = $object->getLevel9Code();
        if (null !== $object->getListID()) {
            $data->{'ListID'} = $object->getListID();
        }
        $data->{'Name'} = $object->getName();
        $data->{'ParentID'} = $object->getParentID();
        if (null !== $object->getURI()) {
            $data->{'URI'} = $object->getURI();
        }

        return $data;
    }
}
