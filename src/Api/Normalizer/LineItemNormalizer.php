<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Concur\Api\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class LineItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Concur\\Api\\Model\\LineItem';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'Concur\\Api\\Model\\LineItem';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Concur\Api\Model\LineItem();
        if (property_exists($data, 'Amount')) {
            $object->setAmount($data->{'Amount'});
        }
        if (property_exists($data, 'Date')) {
            $object->setDate(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'Date'}));
        }
        if (property_exists($data, 'Description')) {
            $object->setDescription($data->{'Description'});
        }
        if (property_exists($data, 'Description2')) {
            $object->setDescription2($data->{'Description2'});
        }
        if (property_exists($data, 'Quantity')) {
            $object->setQuantity($data->{'Quantity'});
        }
        if (property_exists($data, 'Rate')) {
            $object->setRate($data->{'Rate'});
        }
        if (property_exists($data, 'RateType')) {
            $object->setRateType($data->{'RateType'});
        }
        if (property_exists($data, 'Reference')) {
            $object->setReference($data->{'Reference'});
        }
        if (property_exists($data, 'SequenceNumber')) {
            $object->setSequenceNumber($data->{'SequenceNumber'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAmount()) {
            $data->{'Amount'} = $object->getAmount();
        }
        if (null !== $object->getDate()) {
            $data->{'Date'} = $object->getDate()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getDescription()) {
            $data->{'Description'} = $object->getDescription();
        }
        if (null !== $object->getDescription2()) {
            $data->{'Description2'} = $object->getDescription2();
        }
        if (null !== $object->getQuantity()) {
            $data->{'Quantity'} = $object->getQuantity();
        }
        if (null !== $object->getRate()) {
            $data->{'Rate'} = $object->getRate();
        }
        if (null !== $object->getRateType()) {
            $data->{'RateType'} = $object->getRateType();
        }
        if (null !== $object->getReference()) {
            $data->{'Reference'} = $object->getReference();
        }
        if (null !== $object->getSequenceNumber()) {
            $data->{'SequenceNumber'} = $object->getSequenceNumber();
        }

        return $data;
    }
}
