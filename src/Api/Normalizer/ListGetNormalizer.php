<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Concur\Api\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ListGetNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Concur\\Api\\Model\\ListGet';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'Concur\\Api\\Model\\ListGet';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Concur\Api\Model\ListGet();
        if (property_exists($data, 'ConnectorID')) {
            $object->setConnectorID($data->{'ConnectorID'});
        }
        if (property_exists($data, 'DisplayCodeFirst')) {
            $object->setDisplayCodeFirst($data->{'DisplayCodeFirst'});
        }
        if (property_exists($data, 'ExternalThreshold')) {
            $object->setExternalThreshold($data->{'ExternalThreshold'});
        }
        if (property_exists($data, 'ID')) {
            $object->setID($data->{'ID'});
        }
        if (property_exists($data, 'IsVendorList')) {
            $object->setIsVendorList($data->{'IsVendorList'});
        }
        if (property_exists($data, 'Name')) {
            $object->setName($data->{'Name'});
        }
        if (property_exists($data, 'SearchCriteriaCode')) {
            $object->setSearchCriteriaCode($data->{'SearchCriteriaCode'});
        }
        if (property_exists($data, 'URI')) {
            $object->setURI($data->{'URI'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        $data->{'ConnectorID'} = $object->getConnectorID();
        if (null !== $object->getDisplayCodeFirst()) {
            $data->{'DisplayCodeFirst'} = $object->getDisplayCodeFirst();
        }
        $data->{'ExternalThreshold'} = $object->getExternalThreshold();
        if (null !== $object->getID()) {
            $data->{'ID'} = $object->getID();
        }
        if (null !== $object->getIsVendorList()) {
            $data->{'IsVendorList'} = $object->getIsVendorList();
        }
        $data->{'Name'} = $object->getName();
        $data->{'SearchCriteriaCode'} = $object->getSearchCriteriaCode();
        $data->{'URI'} = $object->getURI();

        return $data;
    }
}
