<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Concur\Api\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class JourneyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Concur\\Api\\Model\\Journey';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'Concur\\Api\\Model\\Journey';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Concur\Api\Model\Journey();
        if (property_exists($data, 'BusinessDistance')) {
            $object->setBusinessDistance($data->{'BusinessDistance'});
        }
        if (property_exists($data, 'EndLocation')) {
            $object->setEndLocation($data->{'EndLocation'});
        }
        if (property_exists($data, 'NumberOfPassengers')) {
            $object->setNumberOfPassengers($data->{'NumberOfPassengers'});
        }
        if (property_exists($data, 'OdometerEnd')) {
            $object->setOdometerEnd($data->{'OdometerEnd'});
        }
        if (property_exists($data, 'OdometerStart')) {
            $object->setOdometerStart($data->{'OdometerStart'});
        }
        if (property_exists($data, 'PersonalDistance')) {
            $object->setPersonalDistance($data->{'PersonalDistance'});
        }
        if (property_exists($data, 'StartLocation')) {
            $object->setStartLocation($data->{'StartLocation'});
        }
        if (property_exists($data, 'UnitOfMeasure')) {
            $object->setUnitOfMeasure($data->{'UnitOfMeasure'});
        }
        if (property_exists($data, 'VehicleID')) {
            $object->setVehicleID($data->{'VehicleID'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getBusinessDistance()) {
            $data->{'BusinessDistance'} = $object->getBusinessDistance();
        }
        if (null !== $object->getEndLocation()) {
            $data->{'EndLocation'} = $object->getEndLocation();
        }
        if (null !== $object->getNumberOfPassengers()) {
            $data->{'NumberOfPassengers'} = $object->getNumberOfPassengers();
        }
        if (null !== $object->getOdometerEnd()) {
            $data->{'OdometerEnd'} = $object->getOdometerEnd();
        }
        if (null !== $object->getOdometerStart()) {
            $data->{'OdometerStart'} = $object->getOdometerStart();
        }
        if (null !== $object->getPersonalDistance()) {
            $data->{'PersonalDistance'} = $object->getPersonalDistance();
        }
        if (null !== $object->getStartLocation()) {
            $data->{'StartLocation'} = $object->getStartLocation();
        }
        if (null !== $object->getUnitOfMeasure()) {
            $data->{'UnitOfMeasure'} = $object->getUnitOfMeasure();
        }
        if (null !== $object->getVehicleID()) {
            $data->{'VehicleID'} = $object->getVehicleID();
        }

        return $data;
    }
}
